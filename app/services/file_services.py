import os
from datetime import datetime
import re


class FileService:
    def __init__(self, output_dir: str = "Research_output"):
        self.output_dir = output_dir
        self._ensure_directory_exists()

    def _ensure_directory_exists(self):
        if not os.path.exists(self.output_dir):
            os.makedirs(self.output_dir)
            print(f" ðŸ“‚ Created directory: {self.output_dir}")

    def _create_filename(self, query: str) -> str:
        """Create a filename based on user query"""
        filename = query.lower()
        filename = re.sub(r'[^a-z0-9\s]', '', filename)
        filename = filename.replace(' ', '-')
        filename = re.sub(r'-+', '-', filename)
        filename = filename[:50].strip('-')
        timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")

        return f"{filename}-{timestamp}.txt"

    def _convert_markdown_to_text(self, markdown_text: str) -> str:
        """
        Convert markdown formating to plain text for readbility.
        Removes # headers **bold, etc - keeps structure.
        """
        text = markdown_text
        lines = text.split('\n')
        formatted_lines = []

        for line in lines:
            # H1 headers (#)
            if line.startswith('# '):
                title = line.lstrip('# ').strip()
                formatted_lines.append('\n' + '='*80)
                formatted_lines.append(title.upper())
                formatted_lines.append('='*80)

            # H2 headers (## )
            elif line.startswith('## '):
                title = line.lstrip('# ').strip()
                formatted_lines.append('\n' + title.upper())
                formatted_lines.append('-'*len(title))

            # H3 headers (### )
            elif line.startswith('### '):
                title = line.lstrip('# ').strip()
                formatted_lines.append('\n' + title)
                formatted_lines.append('~'*len(title))

            else:
                # Remove bold/italic markdown
                line = line.replace('**', '').replace('__', '')
                line = line.replace('*', '').replace('_', '')
                formatted_lines.append(line)

        return '\n'.join(formatted_lines)

    def _format_document(self, query: str, document: str, metadata: dict) -> str:
        """Format the complete document with header and footer"""

        header = f"""{'='*80}
                    WIKIPEDIA RESEARCH DOCUMENT
                    {'='*80}

                    Research Question:
                    {query}

                    Generated: {datetime.now().strftime("%B %d, %Y at %I:%M %p")}

                    Research Statistics:
                    - Sources Analyzed: {metadata.get('total_articles', 0)} Wikipedia articles
                    - Total Words Processed: {metadata.get('total_words', 0):,} words
                    - Search Queries Used: {', '.join(metadata.get('search_queries', []))}
                    - Candidate Articles Reviewed: {metadata.get('candidates_considered', 0)}

                    {'='*80}

                    """

        footer = f"""

                    {'='*80}
                    SOURCES AND REFERENCES
                    {'='*80}

                    The following Wikipedia articles were used to compile this research:

                    """
        # Add numbered sources with URLs
        for i, article in enumerate(metadata.get('articles', []), 1):
            footer += f"{i}. {article['title']}\n"
            footer += f"   URL: {article['url']}\n"
            footer += f"   Words analyzed: {article['word_count']:,}\n\n"       
            footer += f"""{'='*80}
                    This document was automatically generated by the Wikipedia Research AI Agent.
                    The information is synthesized from Wikipedia content using Claude AI.
                    Always verify important information from the original sources listed above.
                    {'='*80}
                    """

        return header + document + footer

    def save_research_document(self, query: str, document: str, metadata: dict) -> str:
        """
        Save research document to file with metadata header.

        Args:
            query: Original user query
            document: The synthesized research document
            metadata: Dictionary with research metadata

        Returns:
            Path to saved file
        """

        filename = self._create_filename(query)
        filepath = self.path.join(self.output_dir, filename)
        plain_text_document = self._convert_markdown_to_text(document)
        full_document = self._format_document(query, plain_text_document, metadata)

        try:
            with open(filepath, 'w', encoding='utf-8') as file:
                file.write(full_document)

            print(f"ðŸ’¾ Saved research document to: {filepath}")
            return filepath

        except Exception as e:
            raise Exception(f"Failed to save document: {str(e)}")